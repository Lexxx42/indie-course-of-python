# Новый год и спешка

# В последний день уходящего 2016 года Лимак
# собирается принять участие в соревновании по спортивному программированию.
# Соревнование начнётся в 20:00 и будет продолжаться четыре часа,
# то есть ровно до полуночи.
# Участникам будет предложено n задач,
# упорядоченных по возрастанию сложности,
# то есть задача 1 будет самой лёгкой, а задача номер n — самой сложной.
# Лимак знает, что ему потребуется 5·i минут на решение i-й задачи.

# Друзья Лимака планирую устроить роскошную новогоднюю вечеринку
# и Лимак хочет прибыть в полночь или ранее.
# Он знает, что ему требуется ровно k минут чтобы добрать
# до места проведения вечеринки от своего дома,
# где он собирается участвовать в соревновании.

# Сколько максимум задач может успеть решить Лимак,
# так чтобы не опоздать на новогоднюю вечеринку?

# Входные данные

# В первой строке входных данных записаны два целых числа
# n и k (1≤n≤10, 1≤k≤240) — количество задач в соревновании и количество минут,
# за которое Лимак доберётся от дома до места проведения вечеринки.

# Выходные данные

# Выведите одно целое число, равное максимальному количеству задач,
# которое может решить Лимак,
# так чтобы прибыть на новогоднюю вечеринку ровно в полночь или раньше.

# Примечание

# В первом примере на соревновании участникам предложено 3 задачи
# и Лимаку требуется 222 минуты, чтобы доехать до места проведения вечеринки.
# Для решения задач требуется 5, 10 и 15 минут соответственно.
# Лимак может решить первые две задачи, потратив на это 5+10=15 минут,
# после чего выехать в 20:15 и приехать на вечеринку в 23:57 (через 222 минуты).
# Таким образом он решит две задачи, но на решение третьей времени уже не хватит и ответ равен 2.

# Во втором примере Лимак может решить все 4 задачи за 5+10+15+20=50 минут.
# В 20:50 он сможет выехать из дома и прибыть на вечеринку ровно в полночь.

# В третьем примере Лимаку нужна только 1 минута,
# чтобы оказаться на вечеринке, так что ему хватит времени для решения всех 7 задач.

# Sample Input 1:

# 3 222
# Sample Output 1:

# 2
# Sample Input 2:

# 4 190
# Sample Output 2:

# 4
# Sample Input 3:

# 7 1
# Sample Output 3:

# 7
# Sample Input 4:

# 1 240
# Sample Output 4:

# 0
# Sample Input 5:

# 10 1
# Sample Output 5:

# 9
# Sample Input 6:

# 9 235
# Sample Output 6:

# 1

# available_time, dificulty, done_exs = 240, 1, 0
# n, k = map(int, input().split())
#
# available_time -= k
# while available_time >= 0 and n > 0:
#     available_time -= 5 * dificulty
#     done_exs += 1
#     n -= 1
#     if available_time < 0:
#         done_exs -= 1
#         break
#     dificulty += 1
# print(done_exs)

n, k = map(int, input().split())
c = 0
while (k <= 240) * (c <= n):
    c += 1
    k += c * 5
print(c - 1)

# n, k = map(int, input().split())
# print(min(n, int(((1 + 8 * (4 * 60 - k) / 5) ** .5 - 1) / 2)))
