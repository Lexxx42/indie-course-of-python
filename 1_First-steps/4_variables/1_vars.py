# К объектам относятся числа и их математические операции.

# Переменная - именованная область памяти, предназначенная для хранения значения.
# Переменную можно представить в виде коробочки, в которой вы можете хранить одно значение.
# Зная имя коробки, вы всегда можете обратиться к ее содержимому или заменить его другим значением.

# Создать переменную в Python очень просто — нужно придумать имя переменно
# (идентификатор) и присвоить ему значение при помощи оператора присваивания = (знак ровно).
# Когда у вас появилась переменная со значением, то вы можете к ней спокойно обращаться по имени,
# а также подставлять ее в математические операции.

a = 10  # создаем переменную a и сохраняем в ней значение 10
print(a)  # обращаемся к переменной a и выводим ее на экран
b = a + 1.5  # создаем переменную b в которой хранится результат сложения a(значение 10) и 1.5
a = a + 5  # изменяем содержимое переменной a. То есть 10 + 5
print(b)  # обращаемся к переменной b

# Если мы попытаемся обратится к несуществующей переменной то получим ошибку:

# print(c)  # NameError: name 'c' is not defined
# Переменные создаются в момент первого присвоения им значения.

# Каждая переменная включает в себя 3 составляющие

# 1 Имя переменной (идентификатор)
# 2 Значение переменной
# 3 Тип переменной (тип объекта, который хранится в переменной)

# Имя переменной.

# Существует ряд правил, которых следует придерживаться при выборе имени переменной.

# Имена переменных не могут содержать пробелов
# Имена переменных могут состоять только из букв, цифр и нижнего подчёркивания
# Регистр символов имеет значение.
# Имена переменных age и Age не равны друг другу, это разные переменные.
# Имя переменной не может начинаться с цифры
# Нельзя использовать ключевые слова
# Желательно давать переменным осмысленные значения.
# Когда в вашем коде будет более 3 переменных и все они будут под буквами a, b, c, d и т.д.
# вы можете запутаться и не увидеть явную ошибку.

# Ключевые слова Python (с ними мы познакомимся на курсе, заучивать их не нужно):

# False, class, finally, is, return, None, continue ...


# Переменная - ссылка на объект

# Перед тем, как обращаться к содержимому переменной, необходимо сперва создать переменную,
# присвоив ей значение. В примере ниже мы обращаемся к несозданной переменной b и
# получаем ошибку NameError.

a = 10  # создаем переменную a
print(type(a))  # узнаем тип значения
print(a + b)  # переменная b не объявлена, поэтому получаем NameError

# Переменная (то есть имя или идентификатор как например имя а в примере выше),
# создается автоматически, когда в программе ей впервые присваивается некоторое значение.
# Все последующие операции присваивания просто изменяют значение,
# ассоциированное с уже созданным именем.

# Переменные не имеют никакой информации о типе или ограничениях, связанных с ним.
# Понятие типа присуще объектам, а не именам.
# Переменные являются всего лишь ссылками на конкретные объекты в определенные моменты времени.
#
# Когда переменную используют в выражении, вместо ее имени подставляется объект,
# на который она в настоящий момент ссылается, независимо от того, что это за объект.

# При объявлении переменной создается объект со своим значением,
# затем проверяется есть ли уже созданная переменная с этим именем.
# Если такая переменная есть, то ссылка на прошлый объект заменяется новой ссылкой
# на другой объект в памяти.
# Если такой переменной ранее не было, то просто присваивается ссылка на данный объект.

# Переменная вначале может хранить ссылку на число,
# затем мы можем присвоить ей ссылку на строку и это не вызовет ошибку,
# как в некоторых других языках программирования.
# Такое поведение называется динамической типизацией.
# Противоположной ей является статическая типизация.
print('***')
a = 4
b = 4
a = "hi"

print(b, a)

# Оператор присваивания

# Оператор присваивания обозначается знаком равно =.

# Левая часть = Правая часть
# При это он сперва вычисляет значение, стоящее в правой части, и сохраняет в переменную,
# находящуюся в левой.
# Если в левой части стоит переменная, которая не существовала до этого момента, она создается.
# Если переменная в левой части существовала, в нее сохранится ссылка на новое значение

# Массовое присвоение
a = b = c = d = e = 1
print('==')
print(a, b, c, d, e)

# Множественное присвоение
r, k = 12.2, 'df'
print(r, k)

# Задача: поменять значения местами
print('swap a, b')
a = 2
b = 7
print(a, b)
t = b
b = a
a = t
print(a, b)
