# Операторы break continue else

# Инструкция for, как и while, является конструкцией, позволяющей организовать цикл.
# У for и while разная логика организации цикла,
# что влияет на количество повторений цикла,
# но у них есть сходства: они оба поддерживают команды.

# break
# continue
# else

# Оператор break

# При помощи оператора break можно осуществить принудительный выход из цикла.
# Вы сразу покидаете цикл и перемещаетесь к следующей инструкции после цикла.

for letter in 'Python':
    if letter == 'h':
        break
    print(f'Current Letter : {letter}')
print('Закончили упражение!')

# Оператор else

# При помощи оператора else создается блок команд в конце цикла for.
# Этот блок команд будет выполнен,
# если цикл for завершился сам по себе без ошибок и без принуждения оператором break.
# Если же цикл был закончен принудительно, то блок else будет пропущен.

for letter in 'Python':
    if letter == 'h':
        break
    print(f'Current Letter : {letter}')
else:
    print('Мы сюда не попадем')
print('-' * 20)

for letter in 'Python':
    if letter == 'W':
        break
    print(f'Current Letter : {letter}')
else:
    print('А вот здесь мы побываем')
print('Закончили упражение!')

# Оператор continue

# При помощи оператора continue можно принудительно осуществить переход в начало цикла,
# при этом команды, расположенные ниже не выполнятся,
# и цикл будет выполнять следующую итерацию.

for letter in 'AbracadabRa':
    if letter == 'a':
        continue
    print(f'Current Letter : {letter}')
print('Закончили упражнение!')

# Оператор pass

# Цикл for обязательно должен иметь блок команд,
# в котором должна находиться как минимум одна инструкция.
# Вы не можете просто создать цикл for и оставить его пустым.
# Для создания пустого цикла for можете использовать оператор pass

for i in range(1000):
    pass

for letter in 'AbracadabRa':
    if letter == 'a':
        pass
    else:
        print(f'Current Letter : {letter}')
print('Закончили упражение!')
