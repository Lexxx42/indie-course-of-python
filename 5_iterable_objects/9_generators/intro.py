# Генераторы списков Python | List comprehension

# Генераторы списков представляют собой очень мощный и удобный функционал,
# позволяющий создать список и сразу наполнить его определенными значениями.
# И главный плюс генератора списка в том, что он умещается всего лишь в одну строчку.

# Создание генератора списка

# Генераторы списка строятся по следующему шаблону:
#
# [выражение for переменная in последовательность]
# При помощи этого шаблона напишем первый генератор.

a = [0 for i in range(7)]
print(a)

# Так как наш цикл for выполняется 7 раз,
# то мы столько раз будем подставлять значение выражения,
# которое стоит перед циклом, в нашем случае это просто 0.
# Также вместо двойки можно указать нашу переменную i.

a = [i for i in range(10)]
print(a)

# В качестве выражения можно указывать и более сложные конструкции, как вывод квадрата числа:

a = [i ** 2 for i in range(10)]
print(a)

# Пределы функции range можно также поменять.
# Изменим с 1 до 15 предел, а также будем получать остаток от деления на 4.
# При делении на 4 могут быть только 4 варианта: 0, 1, 2, 3.

a = [i % 4 for i in range(1, 15)]
print(a)

# В качестве коллекции можно так же обходить и другие итерабельные объекты: строки, списки и т.д.

a = [i for i in "hello"]
print(a)

b = [i * 5 for i in "hello"]
print(b)

# Таким образом, мы получаем список, состоящий из элементов строки.
# Также элементы строки можно продублировать при помощи умножения.
#
# Также внутри выражения можно использовать другие функции.
# Например можно найти код символа в таблице ASCII:

a = [ord(i) for i in "hello"]
print(a)

# Для более наглядного примера напишем символы, которые располагаются по порядку:

a = [ord(i) for i in "abcd"]
print(a)

# В качестве выражения могут выступать и функции из модулей.
# Например, randint из модуля random. Добавим в список 10 случайных чисел от -10 до 10.

from random import randint

a = [randint(-10, 10) for i in range(10)]
print(a)

# Теперь обойдём элементы другого списка при помощи генератора.
# Возьмём генератор из прошлого примера и создадим ещё один,
# который будет превращать все отрицательные значения в положительные.

from random import randint

a = [randint(-10, 10) for i in range(10)]
print(a)
b = [abs(elem) for elem in a]
print(b)

# Как мы видим, второй генератор справился со своей задачей и все отрицательные числа стали положительными.
#
# Также при помощи генераторов можно изменять элементы изначального списка.
# Например, увеличим все значения списка a на 1.

from random import randint

a = [randint(-10, 10) for i in range(10)]
print(a)
a = [elem + 1 for elem in a]
print(a)

# Как мы видим, наша программа справилась с увеличением всех значений на 1,
# при этом все изменения сохранились в той же переменной, в которой изначально хранился список.

# Условный оператор в генераторе списка

# В генераторах списка можно также использовать условные конструкции. Шаблон в таком случае следующий:

# [выражение for переменная in последовательность if условие]

# Допустим, из списка a в список b нужно перенести все элементы, которые являются чётными:

from random import randint

a = [randint(-10, 10) for i in range(10)]
print(a)
b = [elem for elem in a if elem % 2 == 0]
print(b)

# Как мы видим, во второй список не попал ни один нечётный элемент, как нам и надо было.
# Можно добавлять так же сложные условия: допустим, чтобы делился на 2 и не был отрицательным:

from random import randint

a = [randint(-10, 10) for i in range(10)]
print(a)
b = [elem for elem in a if elem % 2 == 0 and elem >= 0]
print(b)

# Как мы видим, все нечетные и отрицательные числа были убраны из списка.

# Считывание данных при помощи генератора списка

# Теперь рассмотрим пример, когда мы вводим в одну переменную несколько чисел через пробел через input().
# Полученный результат будет являться строкой, а не числом.
# При этом, нельзя просто написать a = int(input()), поскольку это приведёт к ошибке,
# однако можно разбить строку на составляющие путём метода split():

a = input()
print(a, type(a))  # в а хранится строка

a = a.split()
print(a, type(a))  # в а хранится список из строк

a = [int(i) for i in a]  # в а хранится список из целых чисел
print(a, type(a))

# в одну строчку все эти преобразования можно записать вот так
b = [int(num) for num in input('Введите числа для b: ').split()]
print(b)

# Как мы видим, элементы из списка до сих пор являются строковым типом данных,
# но это можно легко исправить с помощью генератора.
# Как мы видим, теперь у нас есть список из элементов целочисленного типа данных.

# Такой ввод также можно осуществить при функции map() и записать это в одну строчку. Это будет в отдельном видео.
# На многих сайтах с решением задач на python часто встречаются такие примеры,
# когда получаемые данные записаны в одну строчку и их нужно разделить и преобразовать.

# Вложенные циклы в генераторе списка

#  генераторах списка также можно использовать двойные циклы.

a = [(i, j) for i in 'abc' for j in [1, 2, 3]]
print(a)

# [('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1), ('c', 2), ('c', 3)]

# Принцип работы как при обходе обычных вложенных циклов.
# Мы берём первую переменную из внешнего цикла, и проходим с ней все переменные внутреннего цикла,
# после чего берётся вторая переменная внешнего цикла и т.д.

# Такие вложенные циклы внутри генератора можно сопровождать какими-либо условиями:

a = [i * j for i in [2, 3, 4, 5] for j in [1, 2, 3] if i * j >= 10]
print(a)  # [12, 10, 15]
