# Функция range и итерируемые объекты

# С помощью функции range() можно сформировать конечную арифметическую прогрессию.

# Рассмотрим в консоли функцию range().
# Этой функции необходимо передать один аргумент,например, значение 5.
# Если вы введете в консоли range(5) , то получите range(0, 5)

# Никакой арифметической прогрессии мы не увидели.
# Чтобы она появилась, оберните  range() в функцию list(),
# и тогда вы увидите сгенерированную последовательность в виде списка:

print(list(range(5)))  # [0, 1, 2, 3, 4]
print(list(range(6)))  # [0, 1, 2, 3, 4, 5]
print(list(range(11)))  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list(range(-5)))  # []
print(list(range(0)))  # []

# Обратите внимание, что все последовательности начинаются с 0 и не включают переданное число.
# Поэтому, если нужно, чтобы последовательность заканчивалась числом 5, то нужно вызвать range(6).

# Обратите внимание, что количество элементов в списке будет равно числу,
# которое было передано в скобках функции range
# (в примере у нас 5 элементов в списке при вызове функции range(5)).

# Если указать 0 или отрицательное значение, то получим пустую последовательность.
# Это связано с тем, что по умолчанию функция range()
# формирует возрастающую арифметическую прогрессию, начинающуюся с нуля, с шагом один.
# А от нуля до отрицательного числа, прибавляя единицу, пройти не получится.

# Вызов range c двумя параметрами

# В функцию range() можно также передавать второй параметр.
# В таком случае первое число говорит о том,
# откуда будет начинаться отсчёт, а второе – где он будет заканчиваться (не включительно!).
# Например:

print(list(range(10, 20)))  # [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
print(list(range(16, 25)))
print(list(range(-5, 5)))
print('-' * 20)
print(list(range(11, 100)))
print('-' * 20)
print(list(range(15, 5)))  # []

# Нельзя передать в функцию два параметра, в которых первый будет больше, чем второй.
# В таком случае мы так же получим пустую последовательность.
# Потому что range по умолчанию пытается создать возрастающую арифметическую прогрессию,
# в которой следующее значение всегда больше предыдущего на 1.

# Вызов range c тремя параметрами

# Повлиять на возрастание или убывание последовательности можно при помощи третьего параметра.
# Он влияет на шаг арифметической последовательности, т.е. на разницу между элементами.
# Например:

print(list(range(1, 100, 10)))  # [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]
print(list(range(16, 25, 2)))  # [16, 18, 20, 22, 24]
print(list(range(5, 50, 5)))
print('-' * 20)
print(list(range(10, 0, -1)))
print(list(range(5, -5, -1)))
print(list(range(10, -10, -2)))
print('-' * 20)
print(list(range(15, 5, 2)))  # []

# В первом примере мы берем список от 1 до 100 с шагом 10 (каждое десятое число),
# т.е. сначала 1, потом 1+10 = 11, 11+10=21 и т.д. до 91.

# Обратите внимание, если бы у нас была такая запись:

print(list(range(1, 101, 10)))

# то 101 мы бы всё равно не получили,
# поскольку арифметическая прогрессия формируется в данном случае по 101 не включительно.
# Поэтому, чтобы получить в этом списке 101, необходимо указать любое значение от 102 до 111.

# При помощи третьего параметра можно указать и убывающую арифметическую прогрессию, например:

list(range(10, 0, -1))

# В этом случае мы получим значения от 10 до 1.
# С помощью указания шага можно взять любые удобные для вас числа,
# например, все четные числа, которые меньше 100, начиная с нуля:

list(range(0, 100, 2))

# Итак, у нас есть три варианта использования range():

# С одним параметром.
# В последовательность войдут все числа от 0 до этого числа, не включая число.

# С двумя параметрами.
# В последовательность войдут все числа с первого (включительно) до второго (не включительно).

# С тремя параметрами.
# В последовательность войдут числа с первого (включительно)
# до второго (не включительно) с шагом, равным третьему числу.

# Операции с  range

# Что ещё можно сделать с данной функцией?
#
# 1) Можно найти сумму арифметической прогрессии.
# Например, посчитать сумму чисел от 1 до 100.
# Для этого можно воспользоваться функцией sum()
# и передать ей на вход последовательность чисел от 1 до 100:

sum(range(1, 101))  # Получим: 5050

# Если есть сомнения в правильности, то можно вызвать ту же функцию,
# только с последовательностью поменьше, например, найти сумму чисел от 1 до 3:

sum(range(1, 4))  # Получим: 6

# 2) Можно посчитать количество чисел в последовательности при помощи функции len().
# К примеру, узнаем, сколько есть чисел от 5 до 15 (не включительно) при шаге в 5:

len(range(5, 15, 5))  # Получим: 2

# 3) Можно использовать в конструкции множественного присвоения. Например:

a, b, c = range(5, 16, 5)

# Получим, что a = 5, b = 10, c = 15

# 4) Результат функции можно сохранить в переменную:

r = range(1, 7)

# У этой переменной можно:

# узнать количество элементов:
len(r)  # Получим: 6

# обратиться к её элементу по индексу:
r[1]  # Получим: 2

# Напоминание: индексация начинается с 0, поэтому чтобы получить 1, необходимо указать r[0].
# Если использовать r[1], то на выходе получится 2.

# Итерируемый объект

# Итерируемый объект – объект, предоставляющий возможность поочередного прохода по своим элементам.
# Т.е. сам объект range() является итерируемым объектом.

# Рассмотрим это на примере. Для начала итератор нужно создать при помощи функции iter()

v = iter(range(5))
print(v)

# Видим, как на экране распечатался адрес нового созданного объекта range_iterator

# Итераторы нужны для обхода элементов, хранящихся внутри итератора.
# Как это сделать? Как обходить элементы?

# Очень просто, через функцию next().

# Сам итератор хранит в себе информацию о последовательности пройденных элементов и о том,
# какой элемент будет обходиться следующим.
# Т.к. мы не брали еще никакой элемент, то мы получим сначала первый, потом второй и т.д.

v = iter(range(5))
print(next(v))
print(next(v))
print(next(v))
print(next(v))
print(next(v))

# В случае, если после вызова последнего элемента будет ещё одна попытка вызова этой функции,
# то мы получим ошибку StopIteration,
# которая говорит о том, что все элементы были пройдены и больше элементов нет.

# Таким образом, итерируемые объекты позволяют поочередно пройти по всем своим элементам,
# и они поддерживают вызов функции next().
# При обходе создаётся итератор, запоминающий на каком элементе мы сейчас находимся.
# После завершения обхода всех элементов последующая попытка вызова функции nextведёт к исключению StopIteration.

# К итерируемым объектам относятся списки:

n = iter([43, True, "hello "])
print(next(n))  # 43
print(next(n))  # True
print(next(n))  # hello

# Если расскоментировать строку ниже, получите ошибку StopIteration
# print(next(n))

# К итерируемым объектам также относится строка.
#
# Числа – не итерируемые объекты.
#
# О других итерируемых объектах мы поговорим в следующих занятиях.
