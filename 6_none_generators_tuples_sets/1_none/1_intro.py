# Значение None
# Во многих языках программирования и в языке SQL есть специальное значение, обозначающее нейтральное пустое значение.
#
# Вот и python не стал исключением, в нем присутствует аналогичное значение, которое называется None
#
# Введение в значение None
# В python значение None — это специальный объект, принадлежащий типу данных NoneType. Он обозначает отсутствие значения

print(None)
print(type(None))  # <class 'NoneType'>

# None — это одноэлементный объект(синглтон) класса NoneType.
# Синглтон означает, что может быть только один его экземпляр.
# Фактически, все переменные, которым присвоено значение None, указывают на один и тот же объект в Python.

a = [1, 2, 3]
b = [1, 2, 3]
print(id(a), id(b))  # 1830675303872 1830676755584
print(a == b, a is b)  # подробнее об операторе is чуть ниже ## True False
print('-' * 15)
c = None
d = None
print(id(c), id(d))  # 140727948180680 140727948180680
print(c == d, c is d)  # True True

# При помощи функции id() мы можем определить адрес в памяти, где хранится объект.
# Видите, что мы можем создать два списка с одинаковым значением [1,2,3],
# и они будут храниться в разных адресах памяти(у них разные id).
# Но переменные, хранящие в себе значение None , ссылаются на один и тот же адрес в памяти.

# Операции со значением None
# Значение None не поддерживает никакие математические операции.
# При попытке выполнить сложение, умножение и т.д вы сразу же получите ошибку TypeError: unsupported operand type(s)

# None может участвовать только в операции сравнения, а именно проверки на равенство/неравенство

# Сравнение со значением None
# Сравним сперва None с собой же. Тут есть два варианта:

# знакомый вам оператор сравнения ==, он сравнивает по значению
# оператор is, который сравнивает по адресам в памяти (значит сравнение идет по id)

print('-' * 15)

print(None == None)
print(None is None)
print('-' * 5)
print(None != None)
print(None is not None)
print('-' * 5)
print(None in [1, 2, 3])
print(None in [1, None, 3])

# Как видим, в обоих случаях значения оказались одинаковыми.
#
# Но good practice для сравнения с None это использовать операторы is и is not
#
# Если попытаетесь сравнить значение None с любым другим значением, отличным от None, всегда получите False

print('*' * 15)
print(1 == True)
print(1 is True)
print('*' * 15)

print(None == 1)
print(None == 'Hello')
print(None == '')
print(None == 0)
print(None == [])

# Важно отметить, что объект None имеет следующие особенности:
#
# None не равно нулю 0 или 0.0
# None не то же самое, что False
# None — это не пустая строка ('')
# None - это не пустой список и не любое другое значение

# В общем,  None есть None
# None не равен никому кроме себя

# И сравнить None можно только равенство или неравенство с другим объектом.
# При попытке использовать сравнение на больше/меньше вы получите ошибку

# Где используется None

# 1) Для инициализации переменной.
#
# Когда вам нужно создать переменную, но вы еще не определили значение для нее, вы можете присвоить ей None, например:

# person = None
# print(person)
# if person is None:
#   print("Person is not defined")
# else:
#   print(f"Person={person}")

# 2) Для возврата значения из функций(будем проходить дальше)
#
# 3) Для значений по умолчанию в функциях, чтобы избежать проблемы изменяемых объектов (будем проходить дальше)
