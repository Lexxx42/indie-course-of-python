# Методы множеств
# С основными операциями, которые можно выполнять над множествами, мы с вами разобрались.
# Теперь настало время познакомиться с методами множеств

# Множество является изменяемым объектом,
# поэтому вызов метода множества может оказывать влияние на состояние самого множества,
# у которого вызывается метод, без оператора присвоения.
# Например, может увеличиться или уменьшиться количество элементов множества

# Метод copy
# Метод .copy() копирует элементы оригинального множества в новое множество.
# При этом вы можете сохранить новое множество в отдельную переменную и, вызвав функцию id,
# вы увидите, что перед вами совершенно новый объект

a = {1, 2, 3}
print(a, id(a))  # {1, 2, 3} 1287890785824
b = a.copy()
print(b, id(b))  # {1, 2, 3} 1287890786944

# Методы для удаления элементов из множества

# Метод clear

# Метод .clear() очищает все множество от его элементов,
# тем самым происходит полная очистка.
# В итоге после вызова метода .clear() ваша переменная будет ссылаться на пустое множество

a = {1, 2, 3}
print(a)  # {1, 2, 3}
a.clear()
print(a)  # set()

# Метод remove
# Метод .remove() позволяет удалить элемент из множества. Если указать элемент,
# который отсутствует в множестве, возникнет ошибка KeyError.
# Попробуйте в редакторе кода ниже удалить несуществующий элемент и сами увидите, что произойдет

a = {'mention', 'soup', 'tradition'}
print(a)  # {'tradition', 'mention', 'soup'}
a.remove('tradition')
print(a)  # {'mention', 'soup'}
a.remove('soup')
print(a)  # {'mention'}
a.remove('mention')
print(a)  # set()

# Метод discard
# Метод .discard() позволяет удалить элемент из множества,
# но в отличие от метода .remove() не возникнет ошибки при попытке удалить несуществующий элемент

# Метод pop
# Метод .pop() вернет произвольный элемент из множества, а затем удалит его.
# При попытке вызвать метод у пустого множества возникнет ошибка KeyError: 'pop from an empty set'

a = {'mention', 'soup', 'tradition'}
print(a)
remove_item = a.pop()
print(f'Удалили {remove_item}, теперь a={a}')
remove_item = a.pop()
print(f'Удалили {remove_item}, теперь a={a}')
remove_item = a.pop()
print(f'Удалили {remove_item}, теперь a={a}')

# Методы для добавления элементов в множество

# Метод add
# Метод .add() позволяет добавить новый элемент в множество.
# Метод оказывает изменение на состояние самого множества без присвоения.
# Если вы пытаетесь добавить элемент, который уже существует в множестве,
# ничего не произойдет и ошибок никаких не будет.

a = {1, 2, 3}
print(a)
a.add(5)
print(a)
a.add(3)
a.add(100)
print(a)

# В метод .add() передается только одно значение и оно обязательно должно быть неизменяемым типом данных.
# Если необходимо добавить несколько значений, то необходимо несколько раз вызвать метод .add().
# В случае, если вы передадите словарь или например список, произойдет ошибка
# TypeError: unhashable type

# Метод update
# Метод .update() позволяет добавить сразу несколько элементов.
# Метод .update() может принимать произвольное количество любых объектов,
# поддерживающий итерацию по своим элементам.
# Это могут быть списки, кортежи, другое множество и т.д.
# Дублирующие элементы последовательностей игнорируются, само множество после вызова меняется

set_str = {'mention', 'soup', 'tradition'}
set_num = {1, 2, 3}
my_list = [True, 101, 'hello', 'soup', 2]
print(set_str)
set_str.update(set_num)
print(set_str)
set_str.update(my_list)
print(set_str)
set_str.update('abcd', (2, 3, 4, 5))
print(set_str)
set_str.update(range(5))
print(set_str)

# По сути метод .update() выполняет операцию объединения элементов нескольких коллекций,
# сохраняя результат сразу в множестве, у которого данный метод был вызван.
