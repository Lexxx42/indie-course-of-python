# Объединение множеств
# Объединение ( от английского union) двух или более множеств объединит в себе все элементы, принадлежащие любому из указанных множеств. В математике объединение множеств A и В обозначается так

# ∪

# A∪B

# Результатом объединения множеств будет является другое множество
# Если вновь рассмотреть социальные сети,
# то при помощи объединения вы можете узнать общее количество друзей,
# которое имеется у вас и другого пользователя.
# За кружочек слева А мы можем обозначить множества ваших друзей,
# за кружок справа B - множество друзей другого пользователя.

# Тогда закрашенная область будет обозначать результат операции объединения - множество друзья,
# с которыми дружите либо вы, либо указанный пользователь.
# В эту область войдет все, что находится в круге A, и все,
# что находится в круге B, включая область их пересечения

# Объединение множеств в python
# Для того, чтобы найти объединение двух множеств, в python используется оператор |.
# Результатом этого оператора будет новое множество. Можно искать Объединение двух и более множеств.

my_friend = {'Bill', 'Ash', 'Jim'}
jack_friends = {'Bill', 'Kir'}

union_me_jack = my_friend | jack_friends
print('Все наши друзья с Джеком', union_me_jack)

terry_friends = {'Zara', 'Pit'}
union_me_jack_terry = my_friend | jack_friends | terry_friends
print('Все наши друзья с Джеком и Терри', union_me_jack_terry)

jim_friends = {'Bill', 'Charmander'}
union_me_jim = my_friend | jim_friends
print('Все наши друзья с Джимом', union_me_jim)

# Тут бы неплохо ещё пару раз отметить, что есть "измерение"
# слияния множеств - вот эта самая палка, которая выдаст результат,
# но не изменит входные данные, а есть фактическое слияние, |= ,
# которое на экране покажет то же самое, но при этом реально сольёт два множества вместе.
# Это как функция sorted в сравнении с методом.sort() и reversed сравнительно с .reverse

# >>> s
# ...
# {1, 2, 3, 4, 5}
# >>> c ={'a', 'b', 'c', 'd'}
# ...
# >>> s | c
# ...
# {1, 2, 3, 4, 5, 'b', 'a', 'd', 'c'}
# >>> s
# ...
# {1, 2, 3, 4, 5}
# >>> c
# ...
# {'d', 'c', 'b', 'a'}
# >>> s.union(c)
# ...
# {1, 2, 3, 4, 5, 'b', 'a', 'd', 'c'}
# >>> s
# ...
# {1, 2, 3, 4, 5}
# >>> s |= c
# ...
# >>> s
# ...
# {1, 2, 3, 4, 5, 'b', 'a', 'd', 'c'}

s = {1, 2, 3, 4}
c = {'a', 'b', 'c'}

d = s | c
print(d)
print(s)
print(c)

s |= c
print(s)
