# Обход элементов кортежа

# Поскольку кортеж является последовательностью, то значит мы можем итерироваться по ней,
# или, другими словами, обходить его элементы при помощи цикла for:

a = (1, 'hi', 3, 54, False, 6, 'the', True)
for item in a:
    print(item)

# В данном случае мы обошли элементы кортежа по значениям
#
# Но поскольку кортеж это упорядоченная коллекция,
# то элементы можно обходить не только по значениям, но и по индексам:

a = (1, 'hi', 3, 54, False, 6, 'the', True)

for item in range(len(a)):
    print(f'Индекс={item}, значение={a[item]}')

# Когда стоит использовать кортежи?

# Как вы поняли, списки являются более удобным и функциональным инструментом чем кортежи.
# Отсюда возникает вопрос когда и зачем кортежи использовать?
# Вот несколько случаев, когда применение кортежей лучше, чем списки:

# 1. Вам необходимо гарантировать неизменяемость объектов
# (в списках есть вероятность того, что в процессе программы значения списка могут потеряться или измениться).

# Изменяемость списков через разделяемые ссылки
a = [1, 2, 3]
b = a
b[1] = 100
print(b, a)  # [1, 100, 3] [1, 100, 3]

# Произошли изменения в обоих списках, поскольку они ссылались на один и тот же объект.
# В кортеже такого произойти не смогло бы.
# Поэтому для хранения констант в вашей программе кортежи идеально подойдут

# 2. Кортеж занимает меньше места в памяти и скорость их обработки выше,
# поэтому при работе с большим объемом данных, лучше использовать кортеж.
# Возьмём абсолютно одинаковую последовательность данных,
# и занесём её в кортеж и в список,
# и при помощи метода __sizeof__() узнаем сколько памяти они занимают в байтах:

a = (1, 'hi', 3, 54, False, 6)
b = [1, 'hi', 3, 54, False, 6]
print(a.__sizeof__())  # 72
print(b.__sizeof__())  # 88

# Как мы видим, с такой разницей в занимаемой памяти,
# при большом количестве объектов в коллекции кортежи являются более выгодными.

# 3. В отличии от списков кортежи могут быть ключами словаря (этот тип данных мы изучим следующим)
