# Работаем с ключами и значениями словаря

# Каждый элемент словаря состоит из пары ключ:значение. Давайте узнаем как с ними работать

# Обращение по ключу
# Словари как и списки поддерживают операцию индексации,
# только вместо индекса нужно указывать значения ключа.
# У словарей вообще нету понятия индекса, потому что словари - это неупорядоченная коллекция данных.
# Поэтому обращаться можно только по ключу через квадратные скобки

# словарь[ключ]

d = {1: 'one', 2: 'two', 3: 'three'}
print(d[2])
print(d[3])

lang = {'eng': 'Английский', 'ru': 'Русский'}
print(lang['ru'])
print(lang['eng'])

# При обращении к ключу, которого в списке нет, мы получим ошибку KeyError.

lang = {'eng': 'Английский', 'ru': 'Русский'}
print(lang['ru'])
print(lang['eng'])
print(lang['Русский'])

# Из примера выше мы видим, что у нас есть два ключа eng и ru, среди них нет значения Русский.
# Отсюда мы делаем следующий вывод:

# связь в паре ключ:значение односторонняя: мы можем по ключу получить значение, а по значению ключ мы не получим

# Создание новой пары ключ:значение
# Для того, чтобы добавить новое значение в словарь необходимо обратится по новому ключу
# и присвоить туда значение вот в таком формате:

# словарь[новый ключ] = значение

# Таким образом, наш словарь пополнится новой парой ключ:значение

lang = {'eng': 'Английский', 'ru': 'Русский'}
print(lang)
lang['fra'] = 'Французский'
print(lang)
lang['esp'] = 'Испанский'
print(lang)
print(lang['fra'], lang['esp'])

# Изменение существующей пары ключ:значение
# Если присвоить новое значение уже существующему ключу,
# то мы просто заменим старое значение. Например:

lang = {'eng': 'Английский', 'ru': 'Русский'}
print(lang)
lang['ru'] = 'Russian'
print(lang)
lang['esp'] = 'Испанский'
print(lang)
name = 'esp'
lang[name] = 'Español'
print(lang)

# Значит в словаре не может быть двух пар с одинаковыми ключами
#
# И раз мы смогли изменить существующий элемент словаря, значит можно сделать вывод что
#
# словарь является изменяемым объектом


# Удаление существующей пары ключ:значение
# Для того, чтобы удалить значение из словаря необходимо воспользоваться
# функцией del и обратится по ключу у словаря

d = {1: 'one', 2: 'two', 3: 'three'}
print(d)
del d[2]
print(d)
del d[3]
print(d)

# Требования к ключу словаря
# Есть важная особенность при работе с ключами словаря, которую нужно запомнить, а именно
#
# Ключом может быть только неизменяемый объект
#
# К неизменяемым объектам относятся:
#
# целые(тип int) и вещественные(тип float) числа
# строки (тип str)
# None
# кортежи (тип tuple)
# неизменяемые множества (тип frozenset) (Еще не проходили, разберем в этом модуле)
# К изменяемым объектам относятся:
#
# списки (тип list)
# множества (тип set) (Еще не проходили, разберем в этом модуле)
# сами словари (тип dict)
# Из этого следует, что ключом словаря не может быть список, множество или словарь.

# Если попытаетесь использовать изменяемый тип в качестве ключа, получите ошибку TypeError: unhashable type

d = {}
my_list = [1, 2, 3]
d[my_list] = 'hello'

# Требования к значению словаря

# Проще дела обстоят со значением словаря:
#
# можете выбрать любой тип данных в качестве значения словаря

d = {}
d[1] = 'Соточка'
d[3.14] = 'Pi'
d['pi'] = 3.14
d['values'] = [1, 2, 3]
d['dictionary'] = dict(a=10, b=20)
print(d)
print(d['dictionary'])
print(d['values'])

# Пример
# Рассмотрим пример работы со словарём.
# Сделаем словарь из строки с большим количеством элементов
# (фамилия, имя, возраст, город, ВУЗ, оценки).
# Наша задача выделить все данные и занести их в словарь

# Для красивого вывода словаря можно использовать функцию pprint из модуля pprint

# from pprint import pprint
# pprint обозначает pretty print

from pprint import pprint  # для красивого вывода словаря

person = {}
s = 'IVANOV IVAN 19 Samara SGU 4 5 5 5 4 3 5 3'

s = s.split()
print(s)
print('-' * 15)
person['last_name'] = s[0]
person['first_name'] = s[1]
person['age'] = int(s[2])
person['city'] = s[3]
person['university'] = s[4]

print(person)
print('-' * 15)

person['marks'] = []
for i in s[5:]:
    person['marks'].append(int(i))

pprint(person)

# ---------------
# {'last_name': 'IVANOV', 'first_name': 'IVAN', 'age': 19, 'city': 'Samara', 'university': 'SGU'}
# ---------------
# {'age': 19,
#  'city': 'Samara',
#  'first_name': 'IVAN',
#  'last_name': 'IVANOV',
#  'marks': [4, 5, 5, 5, 4, 3, 5, 3],
#  'university': 'SGU'}
