# Методы словаря

# Словари имеют достаточно большое количество методов и настало время с ними познакомиться
#
# Не забывайте, что словарь - изменяемый объект.
# Поэтому вызов метода словаря может оказывать влияние на состояние самого словаря,
# у которого вызывается метод, без оператора присвоения.
#
# Метод clear
# Метод .clear() очищает весь словарь. В итоге после вызова получится пустой словарь

d = {1: 'one', 2: 'two', 3: 'three'}
print(d)
d.clear()
print(d)

# Метод get
# Метод get() – позволяет получить значение ключа.
# Нужно указать внутри скобок один аргумент – ключ, значение которого хотим получить.
# Если ключа в словаре нет, то выведет None,
# но если в метод get() внести второй аргумент, то вместо None будет появляться это значение:

d = {1: 'one', 2: 'two', 3: 'three'}
print(d.get(1))
print(d.get(5))
print(d.get(5, 'No such key'))

# Метод setdefault
# Метод setdefault() - получает значение ключа.
# Похож на прошлый метод get(),
# однако при обращении к несуществующему ключу он вносит в словарь новую пару ключ-значение.
# Значением будет второй аргумент, который был передан в этот метод, либо же None,
# если в методе только один аргумент:

d = {1: 'one', 2: 'two', 3: 'three'}
print(d)
print(d.setdefault(1))
print(d)
print(d.setdefault(6))
print(d)
print(d.setdefault(7, 'семь' ))
print(d)

# Метод pop
# Метод pop() – возвращает значение, находящееся под указанным ключом,
# а из самого словаря удаляется пара с данным ключом:

d = {1: 'one', 2: 'two', 3: 'three'}
print(d.pop(2))
print(d)

deleted_value = d.pop(1)
print(deleted_value)
print(d)

# Вызов метода без указания ключа, либо же без существующего ключа, приводит к ошибке TypeError.

# Метод popitem
# Метод popitem() удалит и вернет двойной кортеж (key, value) из словаря.
# Пары возвращаются с конца словаря, в порядке LIFO (последним пришёл - первым ушёл).

# Только начиная с версии Python-3.7 гарантируется порядок LIFO.
# В предыдущих версиях метод .popitem() возвращал бы произвольную пару ключ/значение.

d = {1: 'one', 2: 'two', 3: 'three'}
print(d.popitem())
print(d)
print(d.popitem())
print(d.popitem())
print(d)
print('-'*15)
lang = {}
lang['ru'] = 'Русский'
lang['eng'] = 'Английский'
print(lang.popitem())
print(lang.popitem())
print('-'*15)
lang_2 = {}
lang_2['eng'] = 'Английский'
lang_2['ru'] = 'Русский'
print(lang_2.popitem())
print(lang_2.popitem())

# При попытке удаления элементов из пустого словаря возникает ошибка KeyError.

# Метод keys
# Метод keys() позволяет получить все ключи словаря.

d = {1: 'one', 2: 'two', 3: 'three'}
print(d.keys())
keys = list(d.keys())
print(keys)

lang = {'eng':'Английский', 'ru':'Русский'}
print(lang.keys())

# Метод values
# Метод values() позволяет получить все значения словаря

d = {1: 'one', 2: 'two', 3: 'three'}
print(d.values())
vals = list(d.values())
print(vals)

lang = {'eng':'Английский', 'ru':'Русский'}
print(lang.values())

# Метод items
# Метод items() – возвращает коллекцию, в которой содержатся все пары «ключ-значение» в виде кортежей

d = {1: 'one', 2: 'two', 3: 'three'}
print(d.items())
couples = list(d.items())
print(couples)
print('-'*15)

lang = {'eng':'Английский', 'ru':'Русский'}
print(lang.items())

# Метод update
# Метод update() обновляет словарь элементами из другого словаря.
# Другими словами, метод сливает(мержит от английского «merge») один словарь в другой:
# добавляются новые ключи из другого словаря,
# при совпадении ключей записывается значение из переданного словаря

d = {1: 'one', 2: 'two', 3: 'three'}
w = {4: 'four', 5: 'five'}
d.update(w)
print(d)

lang = {'eng':'Английский', 'ru': 'Русский'}
other = {'esp': 'Spanish', 'ru': 'Rus'}
lang.update(other)
print(lang)

# если кто не знал, можно объединить словари ещё вот так:
#
# a = {'name': 'Andrey'}
#
# b = {'age': 31}
#
# c = {**a, **b}





