# Операции со словарями
# Нахождение количества элементов (пар ключ-значение)
# Функция len() помогает найти «длину» словаря (под длиной у словаря понимается количество пар «ключ: значение»)

d = {1: 'one', 2: 'two', 3: 'three'}
print(len(d))

lang = {'eng':'Английский', 'ru':'Русский'}
print(len(lang))

empty_dict = {}
print(len(empty_dict))

# Проверка наличия ключа в словаре
# Мы знаем теперь, что обращаться в словаре можно только по существующему ключу.
# При попытке указать несуществующий ключ вы получите ошибку KeyError.
# Поэтому прежде чем обращаться по ключу необходимо убедиться, что ключ существует.
# В этом поможет оператор in. Он вернет True – когда ключ есть в словаре, в обратном случае – False.
# Если хотите получить противоположный результат, используйте not in

d = {1: 'one', 2: 'two', 3: 'three'}
print(1 in d, 3 in d, 4 in d)
print(5 not in d)
print(2 not in d)
print('-'*15)

lang = {'eng':'Английский', 'ru':'Русский'}
print('eng' in lang)
print('Русский' in lang)
print('Английский' not in lang)

# Преобразование в список
# При помощи функции list можно преобразовать словарь в список,
# но есть одна особенность: получится список только из ключей

d = {1: 'one', 2: 'two', 3: 'three'}
list_d = list(d)
print(list_d)
print('-'*15)

lang = {'eng':'Английский', 'ru':'Русский'}
list_lang = list(lang)
print(list_lang)

# Сравнение словарей
# Словари можно сравнивать между собой,
# но сравнение допустимо только на равенство == и неравенство !=.
# Словари будут считаться равными, если они имеют одинаковое количество пар (ключ: значение)
# и при этом в соответствующей паре совпадают и ключ и значение

d = {1: 'one', 2: 'two', 3: 'three'}
a = {2: 'two', 3: 'three', 1: 'one'}
print(d==a)
print('-'*15)

lang = {'eng':'Английский', 'ru':'Русский'}
lang_2 = {'eng':'Английский', 'rus':'Русский'}
lang_3 = {'eng':'Английский', 'ru':'Russian'}
lang_4 = {}
lang_4['ru'] = 'Русский'
lang_4['eng'] = 'Английский'
print(lang==lang_2)
print(lang!=lang_2)
print(lang==lang_3)
print(lang==lang_4)

# Сравнение при помощи операторов > < >= <= приведет к ошибке TypeError

# Также обратите внимание, что мы сравнивали словари только со словарями.
# Попытка сравнить словарь с другим типом данных (списком, строкой, числом и т.д.) приведет вновь к ошибке TypeError

# Слияние словарей
# Можно объединять пары ключ-значения при помощи операции слияния |.
#
# dict_1 | dict_2
# Данная операция появилась с версии python 3.9, будьте аккуратны!
#
# К значениям словаря, стоящего слева, будут добавляться значения словаря, стоящего справа от знака операции.
# При совпадении ключей будет браться значения из правого словаря.
# Поэтому для этой операции важно на каком месте стоят словари

dict_1 = {'John': 15, 'Rick': 10, 'Misa' : 12 }
dict_2 = {'Bonnie': 18,'Rick': 20}
dict_3 = dict_1 | dict_2
dict_4 = dict_2 | dict_1
print(dict_3)
print('-'*15)
print(dict_4)

# Это не единственный способ выполнить слияние словарей, но, на мой взгляд, самый простой и понятный
