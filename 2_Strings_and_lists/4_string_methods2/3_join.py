# Метод .join является противоположностью метода .split.
# При помощи него вы можете разбитую строку вновь собрать в одно целое.

# Метод .join  имеет следующий шаблон вызова:

# S.join(iterable)
# Метод .join заставляет нас встретиться с темой, которую мы еще не проходили:
# итерабельные(iterable) объекты.
# Не волнуйтесь, мы ее в дальнейшем конечно же разберем.
# И советую вернуться к этому уроку.
# Сейчас для упрощения лишь скажу, что к iterable относятся строки и списки,
# и мы их можем передать в данный метод

# Метод .join отвечает за объединение списка строк с помощью определенного указателя.
# Часто это используется при конвертации списка в строку.
# Вначале вы пишете строку-соединитель, затем ставите точку и вызываете метод .join.
# В скобках указываете переменную, в которой у вас храниться список или другая строка.

w = 'ivanov ivan ivanovich'
s = w.split()
print(s)
print('!'.join(s))

y = 'hello world'
print('&'.join(y))

words = ['London', 'is', 'the', 'capital', 'of', 'GB']
print(','.join(words))

# Ниже перед вами представлен список list_strings,
# состоящий из строк.
# При помощи метода .join и соединителя - получите строку из этих элементов и выведите ее на экран

# Sample Input:

# Sample Output:

# Follow-the-Cops-Back-Home

print("-".join(['Follow', 'the', 'Cops', 'Back', 'Home']))
