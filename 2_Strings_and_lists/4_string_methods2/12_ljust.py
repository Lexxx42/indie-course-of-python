# Метод ljust
# Метод .ljust  имеет следующий шаблон вызова:

# S.ljust(width[, fillchar])
# Метод .ljust принимает один обязательный параметр width - ширину строки
# и один необязательный параметр fillchar - знак заполнителя (по умолчанию пробел).
# Возвращает новую строку, в которой исходная строка S дополнена справа символами
# fillchar до указанной длины width.
# Если параметр width меньше длины строки,
# то будет возвращена исходная строка без изменений:

print('ljust')
d = 'qwerty'
print(d.ljust(10))
print(d.ljust(10, '-'))
print(d.ljust(10, '&'))
print(d.ljust(5, '!'))

# В параметр fillchar можно передать только строку, состоящую из одного символа.
# Если передать пустую строку или более одного символа, произойдет ошибка:

# d = 'qwerty'
# print(d.ljust(10, '!@'))
# print(d.ljust(10, ''))

# Метод rjust

# Метод .rjust  имеет следующий шаблон вызова:
# S.rjust(width[, fillchar])
# Метод .rjust принимает один обязательный параметр
# width - ширину строки и один необязательный параметр fillchar
# - знак заполнителя (по умолчанию пробел).
# Возвращает новую строку, в которой исходная строка S дополнена слева символами
# fillchar до указанной длины width.
# Если параметр width меньше длины строки, то будет возвращена исходная строка без изменений:

print('rjust')
d = 'qwerty'
print(d.rjust(10))
print(d.rjust(10, '-'))
print(d.rjust(10, '&'))
print(d.rjust(5, '!'))

# Метод center
# Метод .center  имеет следующий шаблон вызова:
# S.center(width[, fillchar])
# Метод .center принимает один обязательный параметр
# width - ширину строки и один необязательный параметр fillchar - знак заполнителя (по умолчанию пробел).
# Возвращает новую строку длины width, в которой исходная строка S находится в центре,
# а справа и слева от нее находятся символы fillchar.
# Если параметр width меньше длины строки, то будет возвращена исходная строка без изменений.

print('center')
d = 'qwerty'
print(d.center(10))
print(d.center(12, '!'))
print(d.center(13, '?'))
print(d.center(5, '!'))

# В параметр fillchar также можно передать только строку,
# состоящую из одного символа.
# В случаях, когда количество необходимых для дополнения символов нечетно,
# слева будет на один символ fillchar больше чем справа.

# Метод zfill
# Метод .zfill  имеет следующий шаблон вызова:
# S.zfill(width)
# Метод .zfill возвращает новую строку, в которой исходная строка S дополнена нулями слева так,
# чтобы длина новой строки стала равна width.

print('zfill')
d = '123'
print(d.zfill(5))
print(d.zfill(6))
print(d.zfill(2))
print(d.zfill(3))
print('0.123'.zfill(6))
