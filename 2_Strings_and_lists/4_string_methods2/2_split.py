# Метод split()

# Метод .split имеет следующий шаблон вызова:

# S.split(sep=None, maxsplit=-1)
# Метод .split выполняет разбиение исходной строки S на подстроки
# по разделителю sep и возвращает их в виде списка.
# Со списками мы познакомимся с вами позднее.
# По умолчанию разделитель sep равен пробелу.

w = 'ivanov ivan ivanovich'
print(w.split())
print(len(w.split()))

print('a b C d e'.split())

# Вы можете задать параметру другое значение.
# Когда параметр sep будет задан,
# то следующие друг за другом разделители не воспринимаются
# как один и считаются разделителями пустых строк:

print('1, 2, 3, 4, 5'.split(', '))
print('a->b->C->->d->e'.split('->'))
print('1      4      5'.split())
print('   a  b   c   '.split())
print('    '.split())
print('wwwww'.split('w'))

# Если параметр sep не указан,
# то последовательные пробелы объединяются вместе и вообще исключаются из разбиений.
# А если строка состоит только из пробелов или является пустой,
# то результатом разделения по пробелу будет пустой список.

# Также можно передать вторым параметром maxsplit
# какое максимальное количество разбиений вы хотите выполнить.

print('1, 2, 3, 4, 5'.split(', ', maxsplit=2))
print('a b C d e'.split(maxsplit=1))
print('a b C d e'.split(maxsplit=2))
print('a b C d e'.split(maxsplit=3))

# Метод .split используется очень часто, его вы обязаны знать.
# При помощи него можно узнать сколько отдельных слов было в исходной строке.
# Для этого достаточно посчитать длину списка после разбиения:

# print(len(S.split()))

# Программа получает на вход фразу,
# ваша задача посчитать из скольких слов состоит данная фраза.
# Для удобства будем считать словом любую последовательность символов.

# Sample Input 1:

# Hello my friend
# Sample Output 1:

# 3
# Sample Input 2:

# Золотистый ретривер
# Sample Output 2:

# 2
# Sample Input 3:

# aa bbb ccc dddd
# Sample Output 3:

# 4
