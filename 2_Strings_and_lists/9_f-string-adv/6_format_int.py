# Формат вывода целых чисел
# При помощи f-строк мы можем влиять и на отображение целых чисел.

n = 12345
print(f'{n:8d}')
print(f'{n:7d}')
print(f'{n:6d}')
print(f'{n:5d}')
print(f'{n:4d}')

# Запись n:7d говорит, что  переменную n нужно представить
# в виде целого числа (это знак  d )
# и на отображение всего числа выделить 7 знаков.
# Если у переменной n не хватает разрядов до семи,
# то впереди отображения появятся знаки пробелов.

# Можно вместо пробелов добавить незначащие нули,

# для этого нужно подписать 0 перед количеством разрядов

print('-----')
print(f'{n:08d}')
print(f'{n:07d}')
print(f'{n:06d}')
print(f'{n:05d}')
print(f'{n:04d}')

# Можно также влиять на знак разделителя между группами чисел, посмотрите пример ниже

# n = 12345678912345
n = 12345678912345
print('----')
print(f'{n:,d}')
print(f'{n:_d}')

sep = '_'
print(f'{n:{sep}d}')  # вложенная f-строка

# Если вы попытаетесь указать другие знаки разделителя вместо знаков , и _ , получите ошибку

# Также нельзя совмещать указание разделителя с указанием количества разрядов.
# Вот смотрите

# print(f'{n:,15d}')

# Где это может быть полезно?

# Это пригодится там, где нужно красиво и ровно вывести информацию.
# В примере ниже будет использована еще не изученная вами тема: цикл for.
# Не бойтесь, мы пройдем ее подробно чуть позже,
# сейчас вам нужно лишь поверхностное понимание того, что здесь происходит.
# Наша программа печатает для каждого числа от 1 до 10 значения его квадрата и куба.
# Смотрите как все это получается без выравнивания

print('====')
print(f'Число Квадрат Куб')
for x in range(1, 11):
    print(f'{x} {x * x} {x * x * x}')

# А теперь с выравниванием

print(f'Число\t\tКвадрат\t\tКуб')
for x in range(1, 11):
    print(f'{x:2d}\t\t{x * x:3d}\t\t{x * x * x:4d}')

# Из комментариев вроде и можно:
print('+++')
n = 12345
print(f'{n:7,d}')  #  12,345
print(f'{n:010_d}')  # 00_012_345
print(f'{n:010_.2f}')  # 012_345.00

print(f'{n:08}')  # 00012345
print(f'{n:07}')  # 0012345
print(f'{n:06}')  # 012345
print(f'{n:05}')  # 12345
print(f'{n:04}')  # 12345

print(f'{11.333:08f}') # 11.333000
print(f'{11.333:08}') # 0011.333

# переводит в 2-ю систему счисления
print(f"{123:b}") # 1111011

# переводит в 8-ю систему счисления
print(f"{123:o}") # 173

# переводит в 16-ю систему счисления
print(f"{123:x}") # 7b

# обозначение 10-ной системы счисления
print(f"{123:d}") # 123

# перевод двоичного числа в 10 систему счисления
print(f"{int('1010', 2):d}") # 10

print('+++')
